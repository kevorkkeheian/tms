@page "/org/drivers/add"
@inject ISnackbar Snackbar
@inject IJSRuntime _jsRuntime
@inject HttpClient _client
@inject NavigationManager _navigationManager
@attribute [Authorize(Roles = "Admin")]


<h4 class="mt-5">Add new Driver</h4>
<MudPaper Elevation="25" Class="mb-2 mt-4">
    <MudToolBar>
        <MudText>
            <Navigation />
        </MudText>
        <MudSpacer />
        <MudIconButton Icon="@Icons.Material.Outlined.MoreVert" Color="Color.Inherit" />
    </MudToolBar>
</MudPaper>


<MudPaper Elevation="25" Class="mb-2 mt-4 p-5">
    <EditForm Model="@Driver" OnValidSubmit="OnValidSubmit" OnInvalidSubmit="OnInValidSubmit">
        <DataAnnotationsValidator/>

        <MudSelect HelperText="Choose store" T="string" Label="Stores" Variant="Variant.Text"  @bind-Value="Driver.StoreId">
        @if(Stores is not null) {
            @foreach (var store in Stores)
            {
                <MudSelectItem Value="@store.Id"> @store.Code - @store.Name</MudSelectItem>
            }
        }
        </MudSelect>

        <MudTextField Label="First Name" HelperText="Max. 15 characters" @bind-Value="Driver.FirstName" For="@(() => Driver.FirstName)" />
        <MudTextField Label="Last Name" HelperText="Max. 15 characters" @bind-Value="Driver.LastName" For="@(() => Driver.LastName)" />
            
        <MudCardActions>
            <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Primary" Class="ml-auto">Add</MudButton>
        </MudCardActions>
    </EditForm>
</MudPaper>




@code {
    bool success;

    private Driver Driver = new Driver();
    private List<Store> Stores { get; set; }

    protected override async Task OnInitializedAsync()
    {
        Stores = await _client.GetFromJsonAsync<List<Store>>("api/store");
    }

    private async Task OnValidSubmit() 
    {
        using var response = await _client.PostAsJsonAsync("api/driver", Driver);

        if(response.IsSuccessStatusCode)
        {
            success = true;
            Snackbar.Add($"New Driver is created", Severity.Success);
            _navigationManager.NavigateTo("org/drivers");
        }
        else
        {
            success = false;
            var error = await response.Content.ReadAsStringAsync();
            Snackbar.Add($"{error}", Severity.Error);
            
        }
    }


    private void OnInValidSubmit() 
    {
        success = false;
        Snackbar.Add($"Please make sure to fill all necessary data!", Severity.Error);

    }


}