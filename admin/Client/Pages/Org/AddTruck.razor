@page "/org/trucks/add"
@inject ISnackbar Snackbar
@inject IJSRuntime _jsRuntime
@inject HttpClient _client
@inject NavigationManager _navigationManager
@attribute [Authorize(Roles = "Admin")]


<h4 class="mt-5">Add new Truck</h4>
<MudPaper Elevation="25" Class="mb-2 mt-4">
    <MudToolBar>
        <MudText>
            <Navigation />
        </MudText>
        <MudSpacer />
        <MudIconButton Icon="@Icons.Material.Outlined.MoreVert" Color="Color.Inherit" />
    </MudToolBar>
</MudPaper>


<MudPaper Elevation="25" Class="mb-2 mt-4 p-5">
    <EditForm Model="@Truck" OnValidSubmit="OnValidSubmit" OnInvalidSubmit="OnInValidSubmit">
        <DataAnnotationsValidator/>

        <MudTextField Label="Plate No." HelperText="Max. 15 characters" @bind-Value="Truck.PlateNo" For="@(() => Truck.PlateNo)" />
            
        <MudCardActions>
            <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Primary" Class="ml-auto">Add</MudButton>
        </MudCardActions>
    </EditForm>
</MudPaper>




@code {
    bool success;

    private Truck Truck = new Truck();

    private async Task OnValidSubmit() 
    {
        using var response = await _client.PostAsJsonAsync("api/truck", Truck);

        if(response.IsSuccessStatusCode)
        {
            success = true;
            Snackbar.Add($"New Truck is created", Severity.Success);
            _navigationManager.NavigateTo("org/trucks");
        }
        else
        {
            success = false;
            var error = await response.Content.ReadAsStringAsync();
            Snackbar.Add($"{error}", Severity.Error);
            
        }
    }


    private void OnInValidSubmit() 
    {
        success = false;
        Snackbar.Add($"Please make sure to fill all necessary data!", Severity.Error);

    }


}