@page "/org/stores/{Id}/edit"
@inject ISnackbar Snackbar
@inject IJSRuntime _jsRuntime
@inject HttpClient _client
@inject NavigationManager _navigationManager
@attribute [Authorize(Roles = "Admin")]


<h4 class="mt-5">Add new Store</h4>
<MudPaper Elevation="25" Class="mb-2 mt-4">
    <MudToolBar>
        <MudText>
            <Navigation />
        </MudText>
        <MudSpacer />
        <MudIconButton Icon="@Icons.Material.Outlined.MoreVert" Color="Color.Inherit" />
    </MudToolBar>
</MudPaper>


<MudPaper Elevation="25" Class="mb-2 mt-4 p-5">
    <EditForm Model="@Store" OnValidSubmit="OnValidSubmit" OnInvalidSubmit="OnInValidSubmit">
        <DataAnnotationsValidator/>

        <MudSelect HelperText="Choose entity" T="string" Label="Entity" Variant="Variant.Text"  @bind-Value="Store.EntityId">
            @if(Entities is not null) {
                @foreach (var entity in Entities)
                {
                    <MudSelectItem Value="@entity.Id"> @entity.Code</MudSelectItem>
                }
            }
            
        </MudSelect>

        <MudTextField Label="Code" HelperText="Max. 15 characters" @bind-Value="Store.Code" For="@(() => Store.Code)" />
        <MudTextField Label="Name" HelperText="Max. 100 characters" @bind-Value="Store.Name" For="@(() => Store.Name)" />
        <MudTextField Label="Description" HelperText="Max. 100 characters" @bind-Value="Store.Description" For="@(() => Store.Description)" />
            <MudTextField Label="Longitude" HelperText="Max. 25 characters" @bind-Value="Store.Longitude" For="@(() => Store.Longitude)" />
        <MudTextField Label="Latitude" HelperText="Max. 25 characters" @bind-Value="Store.Latitude" For="@(() => Store.Latitude)" />
            
        <MudCardActions>
            <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Primary" Class="ml-auto">Add</MudButton>
        </MudCardActions>
    </EditForm>
</MudPaper>




@code {
    [Parameter] public string Id { get; set; }
    bool success;

    private Store Store = new Store();
    private List<Entity> Entities { get; set; }

    
    protected override async Task OnInitializedAsync()
    {
        Entities = await _client.GetFromJsonAsync<List<Entity>>("/api/entity");
        Store = await _client.GetFromJsonAsync<Store>($"/api/store/{Id}");
    }

    

    private async Task OnValidSubmit() 
    {
        using var response = await _client.PutAsJsonAsync($"api/store/{Id}", Store);

        if(response.IsSuccessStatusCode)
        {
            success = true;
            _navigationManager.NavigateTo($"/org/stores");
        }
        else
        {
            success = false;
            var error = await response.Content.ReadAsStringAsync();
            Snackbar.Add($"{error}", Severity.Error);
            
        }
    }


    private void OnInValidSubmit() 
    {
        success = false;
        Snackbar.Add($"Please make sure to fill all necessary data!", Severity.Error);

    }


}


