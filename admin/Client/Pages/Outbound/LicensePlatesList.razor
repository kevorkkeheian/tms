@page "/outbound/lp"
@using System.Net.Http.Json
@inject HttpClient _client
@inject IJSRuntime _jsRuntime
@inject ISnackbar Snackbar
@inject NavigationManager _navigationManager
@attribute [Authorize(Roles = "Owner, Admin")]


<style>
    .mud-table-cell-custom-group {
        font-weight: 500;
    }

    .mud-table-cell-custom-group-footer {
        padding-bottom: 50px;
        text-align: right;
    }
</style>


<h4 class="mt-5">Consolidations</h4>
<MudPaper Elevation="25" Class="mb-2 mt-4">
    <MudToolBar>
        <MudText>
            <Navigation />
        </MudText>
        <MudSpacer />
        <MudIconButton Icon="@Icons.Material.Outlined.Add" OnClick='@(() => Navigate("outbound/lp/add"))' />
        <MudIconButton Icon="@Icons.Material.Outlined.MoreVert" Color="Color.Inherit" />
    </MudToolBar>
</MudPaper>

<MudTable Items="@LicensePlates" Dense="@dense" Hover="true" Bordered="@bordered" Striped="@striped" 
            FixedHeader="true"
            GroupBy="@_groupDefinition"
            GroupHeaderStyle="background-color:var(--mud-palette-background-grey)" 
            Breakpoint="Breakpoint.Sm"
            GroupFooterClass="mb-4"
            MultiSelection="true"
            Filter="new Func<LicensePlate, bool>(FilterFunc1)" @bind-SelectedItem="selectedItem1">
    <ToolBarContent>
        <MudText Typo="Typo.h6">Consolidations</MudText>
        <MudSpacer />
        <MudTextField @bind-Value="searchString1" Placeholder="Search" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
    </ToolBarContent>
    <ColGroup>
        <col style="width: 60px;" />
        <col />
        <col />
        <col />
        <col />
        <col />
    </ColGroup>
    <HeaderContent>
        <MudTh>Store</MudTh>
        <MudTh>Code</MudTh>
        <MudTh>Status</MudTh>
        <MudTh></MudTh>
    </HeaderContent>
    <GroupHeaderTemplate>
        <MudTh Class="mud-table-cell-custom-group" colspan="5">@($"{context.GroupName}: {context.Key}")</MudTh>
    </GroupHeaderTemplate>
    <RowTemplate>
        <MudTd DataLabel="Document No">@context.Store.Code</MudTd>
        <MudTd DataLabel="Delivery Date">@context.Code</MudTd>
        <MudTd DataLabel="Full Name">@context.LicensePlateStatus</MudTd>
        <MudTd DataLabel="Edit">
            <MudIconButton Icon="@Icons.Material.Outlined.Edit" OnClick='@(() => Navigate($"outbound/consolidations/{context.Id}/edit"))'/>
            <MudIconButton Icon="@Icons.Material.Outlined.Delete" Color="Color.Error" OnClick="@(() => OnDeleteAsync(context.Id))" />
        </MudTd>
    </RowTemplate>
    <PagerContent>
        <MudTablePager />
    </PagerContent>
</MudTable>

<div class="d-flex flex-wrap mt-4">
    <div style="min-width:200px;">
        <MudText Inline="true" Class="align-self-center">Selected1: @selectedItem1?.Code</MudText>
    </div>
</div>



@code {
    [Parameter] public bool isSuccess { get; set; }
    private bool dense = false;
    private bool hover = true;
    private bool striped = false;
    private bool bordered = false;
    private string searchString1 = "";
    private LicensePlate selectedItem1 = null;
    private HashSet<LicensePlate> selectedItems = new HashSet<LicensePlate>();

    private List<LicensePlate> LicensePlates = new List<LicensePlate>();


    protected override async Task OnInitializedAsync()
    {
        LicensePlates = await _client.GetFromJsonAsync<List<LicensePlate>>("api/licensePlate");
    }

    private TableGroupDefinition<LicensePlate> _groupDefinition = new()
    {
        GroupName = "Store",
        Indentation = false,
        Expandable = true,
        Selector = (e) => e.Store.Code
    };

    private bool FilterFunc1(LicensePlate LicensePlate) => FilterFunc(LicensePlate, searchString1);

    private bool FilterFunc(LicensePlate LicensePlate, string searchString)
    {
        if (string.IsNullOrWhiteSpace(searchString))
            return true;
        if (LicensePlate.Code.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if (LicensePlate.Store.Code.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if (LicensePlate.Status.ToString().Contains(searchString))
            return true;
        return false;
    }

    private async void OnDeleteAsync(string id)
    {
        // prompt the user to confirm
        var confirmResult = await _jsRuntime.InvokeAsync<bool>("confirm", "Are you sure you want to delete this item?");
            var licensePlate = LicensePlates.FirstOrDefault(j => j.Id == id);

        if(confirmResult) {
            var request = await _client.DeleteAsync($"api/licensePlate/{id}");

            if(request.IsSuccessStatusCode) {
                Snackbar.Add($"Job {licensePlate.Code} is deleted", Severity.Success);
                LicensePlates.Remove(licensePlate);
                StateHasChanged();
            }
            else {
                Snackbar.Add($"Job is not deleted", Severity.Error);
            }
        }
        else {
            Snackbar.Add($"Operation was canceled", Severity.Info);
        }
        
    }


    private void Navigate(string url)
    {
        _navigationManager.NavigateTo(url);
    }
}