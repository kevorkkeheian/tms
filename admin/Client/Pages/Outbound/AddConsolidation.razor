@page "/outbound/consolidations/add"
@using Application.Shared.Models.Warehouse
@inject ISnackbar Snackbar
@inject IJSRuntime _jsRuntime
@inject HttpClient _client
@inject NavigationManager _navigationManager


<h4 class="mt-5">Add new route</h4>
<MudPaper Elevation="25" Class="mb-2 mt-4">
    <MudToolBar>
        <MudText>
            <Navigation />
        </MudText>
        <MudSpacer />
        <MudIconButton Icon="@Icons.Material.Outlined.MoreVert" Color="Color.Inherit" />
    </MudToolBar>
</MudPaper>


@* Header *@

<MudPaper Elevation="25" Class="mb-2 mt-4 p-5">
    <EditForm Model="@Consolidation" OnValidSubmit="OnValidSubmit" OnInvalidSubmit="OnInValidSubmit">
        <DataAnnotationsValidator/>
        <MudSelect HelperText="Choose store" T="string" Label="Store" Variant="Variant.Text"  @bind-Value="Consolidation.StoreId">
        @if(Stores is not null) {
            @foreach (var store in Stores)
            {
                <MudSelectItem Value="@store.Id"> @store.Code</MudSelectItem>
            }
        }
        </MudSelect>
        <MudTextField Label="From LP" HelperText="Max. 15 characters" @bind-Value="FromLicensePlate" For="@(() => FromLicensePlate)" />
        <MudTextField Label="To LP" HelperText="Max. 15 characters" @bind-Value="ToLicensePlate" For="@(() => ToLicensePlate)" />
        <MudCardActions>
            <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Primary" Class="ml-auto">Add</MudButton>
        </MudCardActions>
    </EditForm>
</MudPaper>








@code
{
    private Consolidation Consolidation = new Consolidation();
    private Consolidation NewConsolidation { get; set; }
    private List<Store> Stores { get; set; }

    private string FromLicensePlate { get; set; }
    private string ToLicensePlate { get; set; }


    protected override async Task OnInitializedAsync()
    {
        Stores = await _client.GetFromJsonAsync<List<Store>>("api/store");
        
    }

    

    private async Task OnValidSubmit() 
    {
        var workDetail = await _client.GetFromJsonAsync<WorkDetail>($"api/workdetail/filter?lp={FromLicensePlate}");
        var licensePlate = await _client.GetFromJsonAsync<LicensePlate>($"api/licensePlage/filter?lp={ToLicensePlate}");
        var response = await _client.PostAsJsonAsync("api/consolidation", Consolidation);

        if(response.IsSuccessStatusCode)
        {
            NewConsolidation = await response.Content.ReadFromJsonAsync<Consolidation>();
            Snackbar.Add($"LP {FromLicensePlate} is consolidated to {ToLicensePlate}", Severity.Success);
            StateHasChanged();
            _navigationManager.NavigateTo($"outbound/consolidations");
        }
        else
        {
            var error = await response.Content.ReadAsStringAsync();
            Snackbar.Add($"{error}", Severity.Error);
            
        }
    }


    private void OnInValidSubmit() 
    {
        Snackbar.Add($"Please make sure to fill all necessary data!", Severity.Error);

    }


    
}

