@page "/outbound/routes"
@using System.Net.Http.Json
@inject HttpClient _client
@inject ISnackbar Snackbar
@inject NavigationManager _navigationManager
@inject IJSRuntime _jsRuntime


<h4 class="mt-5">RouteHeaders</h4>

<MudPaper Elevation="25" Class="mb-2 mt-4">
    <MudToolBar>
        <MudText>
            <Navigation />
        </MudText>
        <MudSpacer />
        <MudIconButton Icon="@Icons.Material.Outlined.Add" OnClick='@(() => Navigate("outbound/routes/add"))' />
        <MudIconButton Icon="@Icons.Material.Outlined.MoreVert" Color="Color.Inherit" />
    </MudToolBar>
</MudPaper>

<MudTable Items="@RouteHeaders" Dense="@dense" Hover="@hover" Bordered="@bordered" Striped="@striped" Loading="@loading" Filter="new Func<RouteHeader,bool>(FilterFunc1)" @bind-SelectedItem="selectedItem1">
    <ToolBarContent>
        <MudText Typo="Typo.h6">RouteHeaders</MudText>
        <MudSpacer />
        <MudTextField @bind-Value="searchString1" Placeholder="Search" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
    </ToolBarContent>
    <HeaderContent>
        <MudTh>Document No</MudTh>
        <MudTh>Delivery Date</MudTh>
        <MudTh>Driver</MudTh>
        <MudTh>Truck</MudTh>
        <MudTh>Status</MudTh>
        <MudTh>Departure</MudTh>
        <MudTh>Arrivale</MudTh>
        <MudTh></MudTh>
    </HeaderContent>
    <RowTemplate>
        <MudTd DataLabel="Document No">@context.DocumentNo</MudTd>
        <MudTd DataLabel="Delivery Date">@context.DeliveryDate</MudTd>
        <MudTd DataLabel="Full Name">@context.Driver.FullName</MudTd>
        <MudTd DataLabel="Plate No">@context.Truck.PlateNo</MudTd>
        <MudTd DataLabel="Plate No">@context.RouteStatus</MudTd>
        <MudTd DataLabel="Plate No">@context.DepartedOn</MudTd>
        <MudTd DataLabel="Plate No">@context.ArrivedOn</MudTd>
        <MudTd DataLabel="Edit">
            <MudIconButton Icon="@Icons.Material.Outlined.OpenInNew" OnClick='@(() => Navigate($"outbound/routes/{context.Id}/lines/add"))'/>
            <MudIconButton Icon="@Icons.Material.Outlined.Edit" Disabled="context.RouteStatus == RouteStatus.Pending ? false : true" OnClick='@(() => Navigate($"outbound/routeHeaders/{context.Id}/edit"))'/>
            <MudIconButton Icon="@Icons.Material.Outlined.RocketLaunch" Color="Color.Primary" Disabled="context.RouteStatus == RouteStatus.Pending ? false : true"  OnClick='@(() => OnReleaseAsync(context))'/>
            <MudIconButton Icon="@Icons.Material.Outlined.Delete" Color="Color.Error"  Disabled="context.RouteStatus == RouteStatus.Pending ? false : true" OnClick="@(() => OnDeleteAsync(context.Id))" />
        </MudTd>
    </RowTemplate>
    <PagerContent>
        <MudTablePager />
    </PagerContent>
</MudTable>

<div class="d-flex flex-wrap mt-4">
    <div style="min-width:200px;">
        <MudText Inline="true" Class="align-self-center">Selected1: @selectedItem1?.DocumentNo</MudText>
    </div>
</div>



@code {
    [Parameter] public bool isSuccess { get; set; }
    private bool dense = false;
    private bool hover = true;
    private bool striped = false;
    private bool bordered = false;
    private bool loading = false;
    private string searchString1 = "";
    private RouteHeader selectedItem1 = null;
    private HashSet<RouteHeader> selectedItems = new HashSet<RouteHeader>();

    private List<RouteHeader> RouteHeaders = new List<RouteHeader>();

    protected override async Task OnInitializedAsync()
    {
        loading = true;
        RouteHeaders = await _client.GetFromJsonAsync<List<RouteHeader>>("api/routeHeader");
        loading = false;
    }

    private bool FilterFunc1(RouteHeader RouteHeader) => FilterFunc(RouteHeader, searchString1);

    private bool FilterFunc(RouteHeader RouteHeader, string searchString)
    {
        if (string.IsNullOrWhiteSpace(searchString))
            return true;
        if (RouteHeader.DocumentNo.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if ($"{RouteHeader.DeliveryDate.ToString()}".Contains(searchString))
            return true;
        return false;
    }

    private async void OnDeleteAsync(string id)
    {
        // prompt the user to confirm
        var confirmResult = await _jsRuntime.InvokeAsync<bool>("confirm", "Are you sure you want to delete this item?");
        

        if(confirmResult) {

            var routeHeader = RouteHeaders.FirstOrDefault(j => j.Id == id);

            var request = await _client.DeleteAsync($"api/routeHeader/{id}");
            
            if(request.IsSuccessStatusCode) {
                Snackbar.Add($"RouteHeader {routeHeader.DocumentNo} is deleted", Severity.Success);
                RouteHeaders.Remove(routeHeader);
                StateHasChanged();
            }
            else {
                Snackbar.Add($"RouteHeader is not deleted", Severity.Error);
            }
        }
        else {
            Snackbar.Add($"Operation was canceled", Severity.Info);
        }
        
    }

    private async void OnReleaseAsync(RouteHeader routeHeader)
    {
        // prompt the user to confirm
        var confirmResult = await _jsRuntime.InvokeAsync<bool>("confirm", $"Are you sure you want to release {routeHeader.DocumentNo}?");
        if(confirmResult) {
            routeHeader.RouteStatus = RouteStatus.Released;

            var request = await _client.PutAsJsonAsync<RouteHeader>($"api/routeHeader/{routeHeader.Id}", routeHeader);

            if(request.IsSuccessStatusCode) {
                Snackbar.Add($"RouteHeader {routeHeader.DocumentNo} is released", Severity.Success);
                StateHasChanged();
            }
            else {
                Snackbar.Add($"RouteHeader is not released! Please try again.", Severity.Error);
            }
        }
        else {
            Snackbar.Add($"Operation was canceled", Severity.Info);
        }
        
    }


    private void Navigate(string url)
    {
        _navigationManager.NavigateTo(url);
    }
}