@page "/outbound/loads/{loadHeaderId}/lines/add"
@inject ISnackbar Snackbar
@inject IJSRuntime _jsRuntime
@inject HttpClient _client
@inject NavigationManager _navigationManager


<h4 class="mt-5">Add loads</h4>
<MudPaper Class="mb-2 mt-4">
    <MudToolBar>
        <MudText>
            <Navigation />
        </MudText>
        <MudSpacer />
        <MudIconButton Icon="@Icons.Material.Outlined.MoreVert" Color="Color.Inherit" />
    </MudToolBar>
</MudPaper>




<style>
    .mud-table-cell-custom-group {
        font-weight: 500;
    }

    .mud-table-cell-custom-group-footer {
        padding-bottom: 50px;
        text-align: right;
    }
</style>


@if(LicensePlates is not null && LicensePlates.Count() > 0) {

    <MudPaper Class="mb-2 mt-4 p-5">
        <EditForm Model="@LoadLine" OnValidSubmit="OnValidSubmit" OnInvalidSubmit="OnInValidSubmit">
            <DataAnnotationsValidator/>
            <MudSelect HelperText="Choose pallet" T="string" Label="LicensePlate" Variant="Variant.Text"  @bind-Value="LoadLine.LicensePlateId">
            
                @foreach (var licensePlate in LicensePlates)
                {
                    <MudSelectItem Value="@licensePlate.Id">@licensePlate.Store.Code - @licensePlate.Code</MudSelectItem>
                }

            </MudSelect>
            <MudCardActions>
                <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Primary" Class="ml-auto">Add</MudButton>
            </MudCardActions>
        </EditForm>
    </MudPaper>
}

else {
    <MudAlert Class="my-5" Severity="Severity.Warning">No Pallet left to add!</MudAlert>
}


<MudTable Items="@LoadLines" Dense="false" Hover="true" Bordered="false" Striped="false" 
            FixedHeader="true"
            GroupBy="@_groupDefinition"
            GroupHeaderStyle="background-color:var(--mud-palette-background-grey)" 
            Breakpoint="Breakpoint.Sm"
            GroupFooterClass="mb-4"
            MultiSelection="true"
            Filter="new Func<LoadLine, bool>(FilterFunc1)" @bind-SelectedItem="selectedItem1">
    <ToolBarContent>
        <MudText Typo="Typo.h6">Load Lines</MudText>
        <MudSpacer />
        <MudTextField @bind-Value="searchString1" Placeholder="Search" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
    </ToolBarContent>
    <ColGroup>
        <col style="width: 60px;" />
        <col />
        <col />
        <col />
        <col />
        <col />
    </ColGroup>
    <HeaderContent>
        <MudTh>Store</MudTh>
        <MudTh>Line No</MudTh>
        <MudTh>Pallet</MudTh>
        <MudTh></MudTh>
    </HeaderContent>
    <GroupHeaderTemplate>
        <MudTh Class="mud-table-cell-custom-group" colspan="5">@($"{context.GroupName}: {context.Key}")</MudTh>
    </GroupHeaderTemplate>
    <RowTemplate>
        <MudTd DataLabel="Store">@context.LicensePlate.Store.Code</MudTd>
        <MudTd DataLabel="Line No">@context.LineNo</MudTd>
        <MudTd DataLabel="License Plate">@context.LicensePlate.Code</MudTd>
        <MudTd DataLabel="Load Status">@context.LoadStatus</MudTd>
        <MudTd DataLabel="Edit">
            <MudIconButton Icon="@Icons.Material.Outlined.Edit" OnClick='@(() => Navigate($"outbound/consolidations/{context.Id}/edit"))'/>
            <MudIconButton Icon="@Icons.Material.Outlined.Delete" Color="Color.Error" OnClick="@(() => OnDeleteAsync(context.Id))" />
        </MudTd>
    </RowTemplate>
    <PagerContent>
        <MudTablePager />
    </PagerContent>
</MudTable>







@code
{
    [Parameter] public string loadHeaderId { get; set; }
    private LoadLine LoadLine = new LoadLine();
    private LoadHeader LoadHeader { get; set; }
    private LoadLine NewLoadLine { get; set; }
    private List<LoadLine> LoadLines { get; set; }
    private List<LicensePlate> LicensePlates { get; set; }

    private LoadLine selectedItem1 = null;
    private HashSet<LoadLine> selectedItems = new HashSet<LoadLine>();
    
    public int Count { get; set; } = 1;
    private string searchString1 = "";

    protected override async Task OnInitializedAsync()
    {
        try {
            LoadHeader = await _client.GetFromJsonAsync<LoadHeader>($"api/loadHeader/{loadHeaderId}");
        }
        catch(HttpRequestException e) {
            if(e.StatusCode == System.Net.HttpStatusCode.NotFound) {
                Snackbar.Add($"The load {loadHeaderId} was not found. Make sure that the load exists.", Severity.Error);
                _navigationManager.NavigateTo("outbound/loads");
            }
        }

        LoadLines = await _client.GetFromJsonAsync<List<LoadLine>>($"api/loadLine/filter?headerId={loadHeaderId}");
        LoadLines = LoadLines.OrderBy(l => l.LineNo).ToList();
        LicensePlates = await _client.GetFromJsonAsync<List<LicensePlate>>($"api/licensePlate/filter?routeHeaderId={LoadHeader.RouteHeaderId}");

        if(LoadLines.Count() > 0) {
            Count = LoadLines.Count() + 1;
        }

    }


    private TableGroupDefinition<LoadLine> _groupDefinition = new()
    {
        GroupName = "Store",
        Indentation = false,
        Expandable = true,
        Selector = (e) => e.LicensePlate.Store.Code
    };

    private bool FilterFunc1(LoadLine loadLine) => FilterFunc(LoadLine, searchString1);

    private bool FilterFunc(LoadLine LoadLine, string searchString)
    {
        if (string.IsNullOrWhiteSpace(searchString))
            return true;
        if (LoadLine.LicensePlate.Store.Code.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if (LoadLine.LineNo.ToString().Contains(searchString))
            return true;
        if (LoadLine.LicensePlate.Code.Contains(searchString))
            return true;
        return false;
    }

    

    private async Task OnValidSubmit()  
    {
        LoadLine.LineNo = Count;
        LoadLine.LoadHeaderId = loadHeaderId;
        var response = await _client.PostAsJsonAsync("api/loadLine", LoadLine);

        if(response.IsSuccessStatusCode)
        {
            NewLoadLine = await response.Content.ReadFromJsonAsync<LoadLine>();
            Snackbar.Add($"New consolidation is added to the load", Severity.Success);
            LoadLines.Add(NewLoadLine);
            var licensePlateAdded = LicensePlates.FirstOrDefault(c => c.Id == NewLoadLine.LicensePlateId);
            LicensePlates.Remove(licensePlateAdded);
            StateHasChanged();
        }
        else
        {
            var error = await response.Content.ReadAsStringAsync();
            Snackbar.Add($"{error}", Severity.Error);
            
        }

        Count++;
    }


    private async void OnDeleteAsync(string id)
    {
        // prompt the user to confirm
        var confirmResult = await _jsRuntime.InvokeAsync<bool>("confirm", "Are you sure you want to delete this item?");
        var licensePlate = LicensePlates.FirstOrDefault(j => j.Id == id);

        if(confirmResult) {
            var request = await _client.DeleteAsync($"api/consolidation/{id}");

            if(request.IsSuccessStatusCode) {
                Snackbar.Add($"Consolidation {licensePlate.Code} is deleted", Severity.Success);
                LicensePlates.Remove(licensePlate);
                StateHasChanged();
            }
            else {
                Snackbar.Add($"Consolidation is not deleted", Severity.Error);
            }
        }
        else {
            Snackbar.Add($"Operation was canceled", Severity.Info);
        }
        
    }


    private void OnInValidSubmit() 
    {
        Snackbar.Add($"Please make sure to fill all necessary data!", Severity.Error);

    }

    private void Navigate(string url)
    {
        _navigationManager.NavigateTo(url);
    }
    
}

