@page "/outbound/routes/{routeHeaderId}/lines/add"
@inject ISnackbar Snackbar
@inject IJSRuntime _jsRuntime
@inject HttpClient _client
@inject NavigationManager _navigationManager


<h4 class="mt-5">Add routes</h4>
<MudPaper Elevation="25" Class="mb-2 mt-4">
    <MudToolBar>
        <MudText>
            <Navigation />
        </MudText>
        <MudSpacer />
        <MudIconButton Icon="@Icons.Material.Outlined.MoreVert" Color="Color.Inherit" />
    </MudToolBar>
</MudPaper>





@if(RouteLines is not null) {
    @foreach(var item in RouteLines.OrderBy(r => r.LineNo)) {
        <MudPaper Elevation="25" Class="mb-2 mt-2 p-3">
            <MudText>@item.LineNo - @item.Store.Entity.Code - @item.Store.Code</MudText>
        </MudPaper>
    }
    
}

<MudPaper Elevation="25" Class="mb-2 mt-4 p-5">
    <EditForm Model="@RouteLine" OnValidSubmit="OnValidSubmit" OnInvalidSubmit="OnInValidSubmit">
        <DataAnnotationsValidator/>
        <MudSelect HelperText="Choose store" T="string" Label="Store" Variant="Variant.Text"  @bind-Value="RouteLine.StoreId">
        @if(Stores is not null) {
            @foreach (var store in Stores)
            {
                <MudSelectItem Value="@store.Id">@store.Entity.Code - @store.Code</MudSelectItem>
            }
        }
        </MudSelect>
        <MudCardActions>
            @if(RouteHeader is not null) {
                <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Primary"  Disabled="RouteHeader.RouteStatus == RouteStatus.Pending ? false : true" Class="ml-auto">Add</MudButton>
            }
            
        </MudCardActions>
    </EditForm>
</MudPaper>








@code
{
    [Parameter] public string routeHeaderId { get; set; }
    private RouteLine RouteLine = new RouteLine();
    private RouteHeader RouteHeader { get; set; }
    private List<RouteLine> RouteLines { get; set; }
    private List<Store> Stores { get; set; }
    
    public int Count { get; set; } = 1;


    protected override async Task OnInitializedAsync()
    {
        try {
            RouteHeader = await _client.GetFromJsonAsync<RouteHeader>($"api/routeHeader/{routeHeaderId}");
        }
        catch(HttpRequestException e) {
            if(e.StatusCode == System.Net.HttpStatusCode.NotFound) {
                Snackbar.Add($"The route {routeHeaderId} was not found. Make sure that the route exists.", Severity.Error);
                _navigationManager.NavigateTo("outbound/routes");
            }
        }

        RouteLines = await _client.GetFromJsonAsync<List<RouteLine>>($"api/routeLine/filter?routeHeaderId={routeHeaderId}");
        Stores = await _client.GetFromJsonAsync<List<Store>>("api/store");

        // sort stores by entity then by code
        Stores = Stores.OrderBy(s => s.Entity.Code).ThenBy(s => s.Code).ToList();

        if(RouteLines.Count() > 0) {
            Count = RouteLines.Count() + 1;
        }

    }

    

    private async Task OnValidSubmit() 
    {
        RouteLine.LineNo = Count;
        RouteLine.RouteHeaderId = routeHeaderId;
        var response = await _client.PostAsJsonAsync("api/routeLine", RouteLine);
        

        if(response.IsSuccessStatusCode)
        {
            var newRouteLine = response.Content.ReadFromJsonAsync<RouteLine>().Result;
            @* await response.Content.ReadFromJsonAsync<RouteLine>(); *@
            Snackbar.Add($"New store is added to the route", Severity.Success);
            StateHasChanged();
            RouteLines.Add(newRouteLine);
            RouteLine = new RouteLine();
            @* _navigationManager.NavigateTo("outbound/routes/add/lines"); *@
        }
        else
        {
            var error = await response.Content.ReadAsStringAsync();
            Snackbar.Add($"{error}", Severity.Error);
            
        }

        Count++;
    }


    private void OnInValidSubmit() 
    {
        Snackbar.Add($"Please make sure to fill all necessary data!", Severity.Error);

    }


    
}

