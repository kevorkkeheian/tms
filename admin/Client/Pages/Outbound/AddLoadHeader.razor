@page "/outbound/loads/add"
@inject ISnackbar Snackbar
@inject IJSRuntime _jsRuntime
@inject HttpClient _client
@inject NavigationManager _navigationManager


<h4 class="mt-5">Add new route</h4>
<MudPaper Elevation="25" Class="mb-2 mt-4">
    <MudToolBar>
        <MudText>
            <Navigation />
        </MudText>
        <MudSpacer />
        <MudIconButton Icon="@Icons.Material.Outlined.MoreVert" Color="Color.Inherit" />
    </MudToolBar>
</MudPaper>


@* Header *@

<MudPaper Elevation="25" Class="mb-2 mt-4 p-5">
    <EditForm Model="@LoadHeader" OnValidSubmit="OnValidSubmit" OnInvalidSubmit="OnInValidSubmit">
        <DataAnnotationsValidator/>
        <MudDatePicker Label="Loading Date" @bind-Date="DeliveryDate"/>
        <MudSelect HelperText="Choose route" T="string" Label="Route" Variant="Variant.Text"  @bind-Value="LoadHeader.RouteHeaderId">
        @if(RouteHeaders is not null) {
            @foreach (var routeHeader in RouteHeaders)
            {
                <MudSelectItem Value="@routeHeader.Id"> @routeHeader.DocumentNo</MudSelectItem>
            }
        }
        </MudSelect>
        <MudCardActions>
            <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Primary" Class="ml-auto">Add</MudButton>
        </MudCardActions>
    </EditForm>
</MudPaper>








@code
{
    private DateTime? DeliveryDate = DateTime.Today;
    private LoadHeader LoadHeader = new LoadHeader();
    private LoadHeader NewLoadHeader { get; set; }
    private RouteLine RouteLine = new RouteLine();
    private List<RouteHeader> RouteHeaders { get; set; }


    protected override async Task OnInitializedAsync()
    {
        RouteHeaders = await _client.GetFromJsonAsync<List<RouteHeader>>("api/routeHeader");
    }

    

    private async Task OnValidSubmit() 
    {
        LoadHeader.LoadedOn = DeliveryDate;
        var response = await _client.PostAsJsonAsync("api/loadHeader", LoadHeader);

        if(response.IsSuccessStatusCode)
        {
            NewLoadHeader = await response.Content.ReadFromJsonAsync<LoadHeader>();
            Snackbar.Add($"New Route {NewLoadHeader.DocumentNo} is created", Severity.Success);
            StateHasChanged();
            _navigationManager.NavigateTo($"outbound/loads/{NewLoadHeader.Id}/lines/add");
        }
        else
        {
            var error = await response.Content.ReadAsStringAsync();
            Snackbar.Add($"{error}", Severity.Error);
            
        }
    }


    private void OnInValidSubmit() 
    {
        Snackbar.Add($"Please make sure to fill all necessary data!", Severity.Error);

    }


    
}

