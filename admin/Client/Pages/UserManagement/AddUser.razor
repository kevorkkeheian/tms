@page "/admin/users/add"
@using Microsoft.AspNetCore.Identity
@inject ISnackbar Snackbar
@inject IJSRuntime _jsRuntime
@inject HttpClient _client
@inject NavigationManager _navigationManager
@attribute [Authorize(Roles = "Owner, Admin")]

<PageTitle>Add User</PageTitle>

<h4 class="mt-5">Add new User</h4>
<MudPaper Elevation="25" Class="mb-2 mt-4">
    <MudToolBar>
        <MudText>
            <Navigation />
        </MudText>
        <MudSpacer />
        <MudIconButton Icon="@Icons.Material.Outlined.MoreVert" Color="Color.Inherit" />
    </MudToolBar>
</MudPaper>


<MudPaper Elevation="25" Class="mb-2 mt-4 p-5">
    <EditForm Model="@UserInputModel" OnValidSubmit="OnValidSubmit" OnInvalidSubmit="OnInValidSubmit">
        <DataAnnotationsValidator/>

        <MudTextField Label="Username" @bind-Value="UserInputModel.UserName" For="@(() => UserInputModel.UserName)" />
        <MudTextField Label="First Name" @bind-Value="UserInputModel.FirstName" For="@(() => UserInputModel.FirstName)" />
        <MudTextField Label="Last Name" @bind-Value="UserInputModel.LastName" For="@(() => UserInputModel.LastName)" />
        <MudTextField Label="Email" @bind-Value="UserInputModel.Email" For="@(() => UserInputModel.Email)" />
        <MudTextField @bind-Value="UserInputModel.Password" Label="Password" Variant="Variant.Text" InputType="@PasswordInput" Adornment="Adornment.End" AdornmentIcon="@PasswordInputIcon" OnAdornmentClick="ButtonTestclick" AdornmentAriaLabel="Show Password" />
        <MudTextField @bind-Value="UserInputModel.ConfirmPassword" Label="Password" Variant="Variant.Text" InputType="@PasswordInput" Adornment="Adornment.End" AdornmentIcon="@PasswordInputIcon" OnAdornmentClick="ButtonTestclick" AdornmentAriaLabel="Show Password" />
        
        @if(Roles is not null) {
            <MudSelect Class="mt-4" MultiSelectionTextFunc="@(new Func<List<string>, string>(GetMultiSelectionText))" T="string" Label="Roles" MultiSelection="true" @bind-Value="value" @bind-SelectedValues='options'>
                @foreach (var role in Roles)
                {
                    <MudSelectItem T="string" Value="@role.Name">@role.Name</MudSelectItem>
                }
            </MudSelect>
        }

        @if(Stores is not null) {
            <MudSelect Class="mt-4" SelectAll="true" SelectAllText="Select all stores" MultiSelectionTextFunc="@(new Func<List<string>, string>(GetMultiSelectionStores))" T="string" Label="Stores" MultiSelection="true" @bind-Value="storeValue" @bind-SelectedValues='storeOptions'>
                @foreach (var store in Stores)
                {
                    <MudSelectItem T="string" Value="@store.Id">@store.Code</MudSelectItem>
                }
            </MudSelect>
        }

        <MudCardActions>
            <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Primary" Class="ml-auto">Add</MudButton>
        </MudCardActions>
    </EditForm>
</MudPaper>




@code {
    bool success;
    bool isShow;
    private string value { get; set; } = "Nothing selected";    
    private IEnumerable<string> options { get; set; } = new HashSet<string>();

    private string storeValue { get; set; } = "Nothing selected";
    private IEnumerable<string> storeOptions { get; set; } = new HashSet<string>();

    private UserInputModel UserInputModel = new UserInputModel();

    InputType PasswordInput = InputType.Password;
    string PasswordInputIcon = Icons.Material.Filled.VisibilityOff;

    private List<IdentityRole> Roles { get; set; }
    private List<Store> Stores { get; set; }

    protected override async Task OnInitializedAsync()
    {
        Roles = await _client.GetFromJsonAsync<List<IdentityRole>>($"/api/roles");
        Stores = await _client.GetFromJsonAsync<List<Store>>($"/api/store");
    }

    private string GetMultiSelectionText(List<string> selectedValues)
    {

        return $"{string.Join(", ", selectedValues)}";
    }
    
    private string GetMultiSelectionStores(List<string> selectedValues)
    {
        // get store codes from selectedValues
        var storeCodes = Stores.Where(x => selectedValues.Contains(x.Id)).Select(x => x.Code).ToList();

        return $"{string.Join(", ", storeCodes)}";
    }
    

    private async Task OnValidSubmit() 
    {

        // create user
        var response = await _client.PostAsJsonAsync($"/api/users", UserInputModel);

        if(response.IsSuccessStatusCode)
        {
            // get user Id from response
            var userId = response.Content.ReadFromJsonAsync<ApplicationUser>().Result.Id;

            success = true;
            Snackbar.Add($"New User is created", Severity.Success);
            

            // add roles
            var roleResponse = await _client.PostAsJsonAsync($"api/userroles/{userId}", options);

            
            if(roleResponse.IsSuccessStatusCode) {
                
                // Create User Stores
                foreach(var item in storeOptions) 
                {
                    var userStore = new UserStore
                    {
                        ApplicationUserId = userId,
                        StoreId = item
                    };

                    var userStoreResponse = await _client.PostAsJsonAsync($"api/userstore", userStore);

                    if(!userStoreResponse.IsSuccessStatusCode) {
                        var storeCode = Stores.FirstOrDefault(x => x.Id == item).Code;
                        Snackbar.Add($"Error adding user to store {storeCode}", Severity.Error);
                    }
                }



                Snackbar.Add($"Roles are assigned to the user", Severity.Success);
            }
            else
            {
                Snackbar.Add($"New User is created but role is not assigned", Severity.Warning);
            }


            _navigationManager.NavigateTo($"admin/users");
        }
        else
        {
            success = false;
            var error = await response.Content.ReadAsStringAsync();
            Snackbar.Add($"{error}", Severity.Error);
            
        }
    }

    void ButtonTestclick()
    {
        @if (isShow)
        {
            isShow = false;
            PasswordInputIcon = Icons.Material.Filled.VisibilityOff;
            PasswordInput = InputType.Password;
        }
        else {
            isShow = true;
            PasswordInputIcon = Icons.Material.Filled.Visibility;
            PasswordInput = InputType.Text;
        }
    }


    private void OnInValidSubmit() 
    {
        success = false;
        Snackbar.Add($"Please make sure to fill all necessary data!", Severity.Error);

    }


}