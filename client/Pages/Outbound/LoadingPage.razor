@page "/outbound/loading/{truckId}"
@inject HttpClient _client
@inject ISnackbar _snackbar
@inject NavigationManager _navigationManager
@inject IJSRuntime _jsRuntime

<MudContainer MaxWidth="MaxWidth.Small">

    

    @if(LoadHeader is null ){
        <MudProgressCircular Color="Color.Default" Indeterminate="true" />
    }
    else {
        <MudText>
            <h1>@LoadHeader.DocumentNo</h1>
        </MudText>
        <MudSpacer />
        <MudText>
            <!--Only dilverydate date only-->
            <h6 class="text-muted">@RouteHeader.DeliveryDate_DateOnly</h6>
        </MudText>
        <MudSpacer />
        <MudText>
            <h6 class="text-muted"><span class="me-5">@RouteHeader.Driver.FullName</span> | <span class="ms-5">@RouteHeader.Truck.PlateNo</span></h6>
        </MudText>

        <div class="my-3">
            <MudSpacer />
        </div>
        
        <MudDivider />
        @if(RouteLines is not null) {
            <MudText class="mt-3">
                
                    @foreach(var line in RouteLines) {
                        <h6 class="text-muted">
                            @line.LineNo - @line.Store.Code
                        </h6>
                    }
                
            </MudText>
            <MudSpacer />
        }
        
    }

    <MudFocusTrap Class="my-5" Disabled="Disabled" DefaultFocus="DefaultFocus"> 
        <MudTextField @bind-Value="NewLicensePlate" Label="License Plate" Variant="Variant.Outlined"></MudTextField>
        <div class="d-flex justify-content-between my-2">
                <button class="btn btn-primary text-start">Back</button>
                <button class="btn btn-primary text-start @PostButtonIsDisabled" @onclick="PostLoadLinesAsync">Post</button>
                <button class="btn btn-primary text-end" @onclick="AddNewLicensePlate">Add</button>
        </div>
    </MudFocusTrap>


    <MudPaper Class="my-5" Width="100%">
        <MudList Class="border-solid border-2 mud-border-secondary rounded" Clickable="@true" Dense="@false" DisableGutters="@false" Color="Color.Secondary">
                <MudListItem Text="New License Plates" InitiallyExpanded="true">
                    <NestedList>
                        @if(LoadLines is not null) {
                            @foreach (var item in LoadLines.Select(l => l.LicensePlate.Code).OrderBy(o => o).ToList())
                            {
                                <MudListItem Text="@item" OnClick="@(() => DeleteLoadLine(item))"/>
                                <MudDivider />
                             }
                        }
                    </NestedList>
                </MudListItem>
        </MudList>
    </MudPaper>


</MudContainer>


@code {
    [Parameter] public string truckId { get; set; }

    private bool Disabled { get; set; }
    DefaultFocus DefaultFocus { get; set; } = DefaultFocus.FirstChild;

    private List<string> NewLicensePlates = new List<string>();
    private string NewLicensePlate { get; set; }
    private Truck Truck { get; set; }

    private List<LicensePlate> LicensePlates { get; set; }
    private List<Consolidation> LoadedConsolidations = new List<Consolidation>();
    
    private RouteHeader RouteHeader { get; set; }
    private List<RouteLine> RouteLines { get; set; }
    
    private LoadHeader LoadHeader { get; set; }
    private List<LoadLine> LoadLines = new List<LoadLine>();
    private int Count = 0;

    private string PostButtonIsDisabled => PostIsValid() ? "" : "disabled";


    protected override async Task OnInitializedAsync()
    {
        try
        {
            Truck = await _client.GetFromJsonAsync<Truck>($"/api/truck/{truckId}");
        }
        catch (HttpRequestException e)
        {
            if(e.StatusCode == System.Net.HttpStatusCode.NotFound)
            {
                _snackbar.Add("Truck not found! ü§∑üèª‚Äç‚ôÄÔ∏è", Severity.Error);
            }
            else
            {
                _snackbar.Add("Error loading truck", Severity.Warning);
            }

            _navigationManager.NavigateTo("/outbound/consolidation");
        } 

        

        var routeHeaders = await _client.GetFromJsonAsync<List<RouteHeader>>($"/api/routeheader/filter?routeStatus={RouteStatus.Released}&truckId={truckId}"); 
        
        if(routeHeaders is not null && routeHeaders.Count() > 0)
        {
            RouteHeader = routeHeaders.First();
            RouteLines = await _client.GetFromJsonAsync<List<RouteLine>>($"/api/routeline/filter?routeHeaderId={RouteHeader.Id}");

            

            LicensePlates = await _client.GetFromJsonAsync<List<LicensePlate>>($"/api/licensePlate/filter?routeHeaderId={RouteHeader.Id}");
        }
        else {
            _snackbar.Add($"No pending routes for truck {Truck.PlateNo}", Severity.Warning);
            _navigationManager.NavigateTo("/outbound/loading");
        }


        try
        {
            LoadHeader = await _client.GetFromJsonAsync<LoadHeader>($"/api/loadHeader/filter?truckId={truckId}");

            if(LoadHeader is not null) {
                LoadLines = await _client.GetFromJsonAsync<List<LoadLine>>($"/api/loadline/filter?headerId={LoadHeader.Id}");
            }
        }
        catch(HttpRequestException e)
        {
            if(e.StatusCode == System.Net.HttpStatusCode.NotFound)
            {
                LoadHeader = new LoadHeader
                {
                    RouteHeaderId = RouteHeader.Id,
                    LoadStatus = LoadStatus.Pending   
                };

                var request = await _client.PostAsJsonAsync<LoadHeader>($"/api/loadHeader", LoadHeader);

                LoadHeader = await request.Content.ReadFromJsonAsync<LoadHeader>();

                if(request.IsSuccessStatusCode) {
                    _snackbar.Add("A new Load Header is created!", Severity.Success);
                }
                else {
                    _snackbar.Add("Error creating new Load Header", Severity.Warning);
                }
            }
        }


        
    }


    private async Task AddNewLicensePlate()
    {
        if(!LicensePlates.Select(c => c.Code).Contains(NewLicensePlate)) {
            _snackbar.Add("License plate not found! ü§∑üèª‚Äç‚ôÄÔ∏è", Severity.Error);
            return;
        }

        if (LoadLines is not null && LoadLines.Select(l => l.LicensePlate.Code).Contains(NewLicensePlate))
        {
            _snackbar.Add("License plate already exists", Severity.Warning);
            return;
        }

        if (string.IsNullOrWhiteSpace(NewLicensePlate))
        {
            _snackbar.Add("License plate cannot be empty", Severity.Warning);
        }
        else {
            
            await AddLoadLineAsync();

        }

        NewLicensePlate = "";
    }

    private async Task AddLoadLineAsync()
    {
        Count += 1;

        var licensePlateId = LicensePlates.First(c => c.Code == NewLicensePlate).Id;

        var loadLine = new LoadLine
        {
            LineNo = Count,
            LoadHeaderId = LoadHeader.Id,
            LicensePlateId = licensePlateId,
            LoadStatus = LoadStatus.Loaded
        };


        if(LifoIsRespected(loadLine))
        {
            var response = await _client.PostAsJsonAsync<LoadLine>($"/api/loadline", loadLine);

            if(response.IsSuccessStatusCode)
            {
                loadLine.LicensePlate = LicensePlates.First(c => c.Code == NewLicensePlate);
                _snackbar.Add("Load line added!", Severity.Success);

                // Add Id to loadline
                loadLine.Id = response.Content.ReadFromJsonAsync<LoadLine>().Result.Id;
                LoadLines.Add(loadLine); 
            }
            else
            {
                _snackbar.Add("Error adding load line!", Severity.Warning);
            }
        }
    }

    // check if last store is loaded
    @* private bool LifoIsRespected(LoadLine loadLine) {

        if(LoadLines is null || LoadLines.Count() == 0) {
            
            var lastRouteLine = RouteLines.FirstOrDefault(r => r.LineNo == RouteLines.Max(r => r.LineNo));
            string lastStoreId = lastRouteLine.StoreId;
            
            if(loadLine.Consolidation.StoreId != lastStoreId) {
                _snackbar.Add($"License plate does not belong to Store # {lastRouteLine.LineNo}", Severity.Warning);
                return false;
            }
            else {
                return true;
            }

        }
        else {

            string[] loadedStores = LoadLines.Select(l => l.Consolidation.StoreId).Distinct().ToArray();
            Console.WriteLine($"Loaded Stores: {loadedStores.Count()}");

            if(loadedStores.Contains(loadLine.Consolidation.StoreId)) {
                return true;
            }
            else {

                var routeLinesCount = RouteLines.Count();

                var consolidation = loadLine.Consolidation;
                var routeLine = RouteLines.FirstOrDefault(r => r.LineNo == routeLinesCount - loadedStores.Count());
                
                if(consolidation.StoreId != routeLine.StoreId) {
                    _snackbar.Add($"License plate does not belong to Store # {routeLine.LineNo}", Severity.Warning);
                    return false;
                }
                else {
                    return true;
                }
            }
        }
        
    } *@

    // check if first store is loaded
    @* private bool CheckStoreOrder(LoadLine loadLine)
    {
        // if there is no loadline yet created
        // check if the store is the first store in the route
        if(LoadLines is null || LoadLines.Count() == 0)
        {
             var routeLine = RouteLines.FirstOrDefault(r => r.LineNo == RouteLines.Max(r => r.LineNo));
             string lastStoreId = routeLine.StoreId;

             if(Consolidations.Where(c => c.ConsolidationStatus == ConsolidationStatus.Pending).Any(c => c.StoreId != lastStoreId))
             {
                 _snackbar.Add($"License plate does not belong to Store # {routeLine.Store.Code}", Severity.Warning);
                 return false;

             }
             else
             {
                 return true;
             }
        }
        else
        {
             string[] loadedStores = LoadLines.Select(l => l.Consolidation.StoreId).Distinct().ToArray();

             if(loadedStores.Contains(loadLine.Consolidation.StoreId)) 
             {
                 return true;
             }
             else
             {
                 var routeLinesCount = RouteLines.Count();
             }


        }


       return false;
       
    } *@


    private bool LifoIsRespected(LoadLine loadLine)
    {

        if(LoadLines is null || LoadLines.Count() == 0) {

            // check if it's the first store
            var licensePlate = LicensePlates.FirstOrDefault(c => c.Id == loadLine.LicensePlateId);

            if(licensePlate.StoreId != RouteLines.Last().StoreId)
            {
                _snackbar.Add($"License plate does not belong to {RouteLines.Last().Store.Code}", Severity.Warning);
                return false;
            }
            else
            {
                return true;
            }

        }
        else {
            // If the 1 pallet of the first store is loaded
            // do not check if the next store is the first store in the route
            return true;
        }
    
        return false;
    }


    private async Task DeleteLoadLine(string newLicensePlate) {

        var confirm = await _jsRuntime.InvokeAsync<bool>("confirm", $"Are you sure you want to delete this license plate {newLicensePlate}?");

        if (confirm) {
            var loadLine = LoadLines.FirstOrDefault(l => l.LicensePlate.Code == newLicensePlate);

            var response = await _client.DeleteAsync($"/api/loadline/{loadLine.Id}");
            if(response.IsSuccessStatusCode)
            {
                _snackbar.Add("Load line deleted!", Severity.Success);
                LoadLines.Remove(loadLine);
                DefaultFocus = DefaultFocus.Element;
            }
            else
            {
                _snackbar.Add("Error deleting load line", Severity.Warning);
            }
            
        }
    }


    private async Task PostLoadLinesAsync()
    {
        if (LoadLines.Count() == 0)
        {
            _snackbar.Add("No license plates added", Severity.Warning);
            return;
        }

        LoadHeader.LoadStatus = LoadStatus.Loaded;
        LoadHeader.LoadedOn = DateTime.Now;
        
        var loadRequest = await _client.PutAsJsonAsync($"/api/loadheader/{LoadHeader.Id}", LoadHeader);
    

        if(loadRequest.IsSuccessStatusCode) {
            _snackbar.Add("Loading posted", Severity.Success);
            _navigationManager.NavigateTo("/outbound/loads");


            RouteHeader.RouteStatus = RouteStatus.Loaded;
            var routeRequest = await _client.PutAsJsonAsync($"/api/routeheader/{RouteHeader.Id}", RouteHeader);

        }
        else {
            _snackbar.Add("Error creating load header! Please try again.", Severity.Warning);
        }



    }

    private bool PostIsValid()
    {
        
        if(LoadLines is not null && RouteLines is not null) {
            // get all stores in the route
            var routeLinesStores = RouteLines.Select(r => r.StoreId).Distinct().ToArray();

            // get all stores from the loadlines
            var loadLinesStores = LoadLines.Select(l => l.LicensePlate.StoreId).Distinct().ToArray();

            // check if all stores are loaded
            if(loadLinesStores.Count() == routeLinesStores.Count())
            {
                return true;
            }

            return false;
        }



        return false;

    }
    
}